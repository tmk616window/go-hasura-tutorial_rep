steps:
  # - name: 'golang:latest'
  #   id: 'do testing'
  #   dir: 'graph'
  #   args:
  #   - |
  #       go mod download \
  #       && go test -v
  - name: 'gcr.io/cloud-builders/docker'
    id: 'do building'
    args:
    - 'build'
    - '-t'
    - 'gcr.io/$PROJECT_ID/sample_app:$SHORT_SHA'
    - '-f'
    - './Dockerfile'
    - ' .'
  - name: 'gcr.io/cloud-builders/docker'
    id: 'do pushing image'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/sample_app:$SHORT_SHA'
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'do deploying'
    args:
    - 'run'
    - 'deploy'
    - 'go-api-ci'
    - '--image=gcr.io/$PROJECT_ID/sample_app:$SHORT_SHA'
    - '--project=go-hasura'




# steps:
# # Dockerイメージの作成
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['build', '-t', 'gcr.io/$PROJECT_ID/spring-boot-restful-api-test:$COMMIT_SHA', '.']
# # DockerイメージをContainer RegistryへPush
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['push', 'gcr.io/$PROJECT_ID/spring-boot-restful-api-test:$COMMIT_SHA']
# # DockerイメージをClourd Runへデプロイ
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   entrypoint: gcloud
#   args:
#   - 'run'
#   - 'deploy'
#   - 'spring-boot-restful-api-test'
#   - '--image'
#   - 'gcr.io/$PROJECT_ID/spring-boot-restful-api-test:$COMMIT_SHA'
#   - '--project'
#   - 'go-hasura'
# images:
# - 'gcr.io/$PROJECT_ID/spring-boot-restful-api-test:$COMMIT_SHA'
